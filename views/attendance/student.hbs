<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Attendance Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.7.0/flowbite.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <style>
        :root {
            --bg-primary: #111827;
            /* Tailwind gray-900 */
            --bg-secondary: #1f2937;
            /* Tailwind gray-800 */
            --text-primary: #ffffff;
            /* White */
            --text-secondary: #d1d5db;
            /* Tailwind gray-300 */
            --text-hover: #3b82f6;
            /* Tailwind blue-500 */
            --border-color: #374151;
            /* Tailwind gray-700 */
            --dropdown-bg: #1f2937;
            /* Tailwind gray-800 */
            --dropdown-hover: #374151;
            /* Tailwind gray-700 */
        }
    </style>
</head>

<body class="bg-gray-900 text-white">
    <nav class="bg-[var(--bg-primary)] border-[var(--border-color)]">
        <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
            <a href="/" class="flex items-center space-x-3">
                <span class="self-center text-2xl font-semibold whitespace-nowrap text-[var(--text-primary)]">iLearnCore</span>
            </a>

            <div class="flex items-center md:order-2 space-x-3">
                <!-- User Avatar Dropdown -->
                <button type="button"
                    class="flex text-sm bg-[var(--bg-secondary)] rounded-full focus:ring-4 focus:ring-[var(--border-color)]"
                    id="user-menu-button" aria-expanded="false" data-dropdown-toggle="user-dropdown"
                    data-dropdown-placement="bottom">
                    <span class="sr-only">Open user menu</span>
                    <img class="w-8 h-8 rounded-full" src="https://randomuser.me/api/portraits/men/45.jpg" alt="user photo">
                </button>
                <!-- Dropdown menu -->
                <div class="z-50 hidden my-4 text-base list-none bg-[var(--dropdown-bg)] divide-y divide-[var(--border-color)] rounded-lg shadow-sm"
                    id="user-dropdown">
                    <div class="px-4 py-3">
                        <span class="block text-sm text-[var(--text-primary)]">{{user.fname}} {{user.sname}}</span>
                        <span class="block text-sm text-[var(--text-secondary)] truncate">{{user.uname}}</span>
                    </div>
                    <ul class="py-2">
                        <li><a href="/profile"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Profile</a>
                        </li>
                        <li><a href="changePassword"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Change Password</a>
                        </li>
                        <li><a href="/logout"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Log Out</a>
                        </li>
                    </ul>
                </div>


                <!-- Mobile Menu Button -->
                <button data-collapse-toggle="navbar-user" type="button"
                    class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-[var(--text-secondary)] rounded-lg md:hidden hover:bg-[var(--border-color)]"
                    aria-controls="navbar-user" aria-expanded="false">
                    <span class="sr-only">Open main menu</span>
                    <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 17 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M1 1h15M1 7h15M1 13h15" />
                    </svg>
                </button>
            </div>

            <!-- Navigation Links -->
            <div class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1" id="navbar-user">
                <ul
                    class="flex flex-col font-medium p-4 border border-[var(--border-color)] rounded-lg bg-[var(--bg-secondary)] md:space-x-8 md:flex-row md:border-0">
                    <li><a href="/"
                            class="block py-2 px-3 text-[var(--text-primary)] bg-[var(--text-hover)] rounded-sm">Home</a>
                    </li>
                    <li><a href="/attendance"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Attendance</a>
                    </li>
                    <li><a href="/homework"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Homework</a>
                    </li>
                    <li><a href="/notice-board"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Notice Board</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="flex justify-center min-h-screen p-4">
        <div class="bg-gray-800 text-white p-4 rounded-lg shadow-lg w-full max-w-md">
            <h2 class="text-center text-lg font-semibold">My Attendance</h2>

            <div class="flex justify-between items-center mt-2">
                <button id="prevMonth" class="bg-gray-700 px-2 py-1 rounded">← Previous</button>
                <h3 id="month-year" class="text-md"></h3>
                <button id="nextMonth" class="bg-gray-700 px-2 py-1 rounded">Next →</button>
            </div>

            <div class="grid grid-cols-7 text-center text-sm text-yellow-400 mt-2">
                <div>Sun</div>
                <div>Mon</div>
                <div>Tue</div>
                <div>Wed</div>
                <div>Thu</div>
                <div>Fri</div>
                <div>Sat</div>
            </div>
            <div id="calendar" class="grid grid-cols-7 text-center text-gray-300 mt-2 gap-2">
                <!-- Calendar dynamically generated -->
            </div>

            <div id="graph-container" class="mt-4 p-4 bg-gray-700 rounded-lg">
                <canvas id="attendanceChart"></canvas>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const calendar = document.getElementById("calendar");
            const monthYearText = document.getElementById("month-year");
            const ctx = document.getElementById("attendanceChart").getContext("2d");
            const prevBtn = document.getElementById("prevMonth");
            const nextBtn = document.getElementById("nextMonth");
            const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
            const navbarUser = document.getElementById("navbar-user");

            let currentDate = new Date();
            let currentYear = currentDate.getFullYear();
            let currentMonth = currentDate.getMonth();
            let sampleAttendance = {};  // Initially empty, will be populated by AJAX data

            function getDaysInMonth(year, month) {
                return new Date(year, month + 1, 0).getDate();
            }

            function getFirstDayOfMonth(year, month) {
                return new Date(year, month, 1).getDay();
            }

            function generateCalendar(year, month) {
                calendar.innerHTML = ""; // Clear previous content
                monthYearText.innerText = new Date(year, month).toLocaleString('default', { month: 'long', year: 'numeric' });

                const totalDays = getDaysInMonth(year, month);
                const firstDay = getFirstDayOfMonth(year, month);

                for (let i = 0; i < firstDay; i++) {
                    calendar.appendChild(document.createElement("div"));
                }

                for (let i = 1; i <= totalDays; i++) {
                    const dayDate = new Date(year, month, i);
                    const isSunday = dayDate.getDay() === 0;

                    const day = document.createElement("div");
                    day.className = "p-2 cursor-pointer relative";
                    day.innerHTML = `${i}`;

                    if (!isSunday && sampleAttendance[i]) { // Exclude Sundays from attendance marking
                        const dot = document.createElement("div");
                        dot.className = "w-2 h-2 rounded-full absolute bottom-0 left-1/2 transform -translate-x-1/2";
                        dot.classList.add(sampleAttendance[i] === 'present' ? "bg-green-500" : "bg-red-500");
                        day.title = sampleAttendance[i].charAt(0).toUpperCase() + sampleAttendance[i].slice(1);
                        day.appendChild(dot);
                    }

                    calendar.appendChild(day);
                }
            }

            let chart;
            function updateGraph(data) {
                let presentCount = 0, absentCount = 0, totalDays = 0;

                for (let day in data) {
                    let date = new Date(currentYear, currentMonth, day);
                    if (date.getDay() !== 0) { // Exclude Sundays
                        totalDays++;
                        if (data[day] === 'present') presentCount++;
                        if (data[day] === 'absent') absentCount++;
                    }
                }

                if (chart instanceof Chart) chart.destroy();
                chart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: ['Present', 'Absent'],
                        datasets: [{
                            data: [presentCount, absentCount],
                            backgroundColor: ['#22c55e', '#ef4444']
                        }]
                    },
                    options: {
                        plugins: {
                            datalabels: {
                                formatter: (value, context) => {
                                    const percentage = totalDays ? ((value / totalDays) * 100).toFixed(1) : "0";
                                    return `${percentage}%`;
                                },
                                color: '#fff',
                                font: { weight: 'bold', size: 14 }
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                });
            }

            function updateCalendarView() {
                generateCalendar(currentYear, currentMonth);
                updateGraph(sampleAttendance);
            }

            prevBtn.addEventListener("click", () => {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                updateCalendarView();
            });

            nextBtn.addEventListener("click", () => {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                updateCalendarView();
            });


            function fetchAttendanceData() {
                $.ajax({
                    url: 'attendance/getData',
                    method: 'GET',
                    success: function (response) {
                        console.log(response)
                        sampleAttendance = response;
                        updateCalendarView();
                    },
                    error: function (err) {
                        console.error('Error fetching attendance data:', err);
                    }
                });
            }

            fetchAttendanceData();

            updateCalendarView();
        });
    </script>

</body>

</html>