<!doctype html>
<html>

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.7.0/flowbite.min.js"></script>
    <style>
        .tumble-left {
            animation: tumbleLeft 0.5s forwards;
        }

        .tumble-right {
            animation: tumbleRight 0.5s forwards;
        }

        @keyframes tumbleLeft {
            0% {
                transform: rotate(0deg) translateX(0) scale(1);
                opacity: 1;
            }

            100% {
                transform: rotate(-30deg) translateX(-100%) scale(0.8);
                opacity: 0;
            }
        }

        @keyframes tumbleRight {
            0% {
                transform: rotate(0deg) translateX(0) scale(1);
                opacity: 1;
            }

            100% {
                transform: rotate(30deg) translateX(100%) scale(0.8);
                opacity: 0;
            }
        }
        :root {
            --bg-primary: #111827;
            /* Tailwind gray-900 */
            --bg-secondary: #1f2937;
            /* Tailwind gray-800 */
            --text-primary: #ffffff;
            /* White */
            --text-secondary: #d1d5db;
            /* Tailwind gray-300 */
            --text-hover: #3b82f6;
            /* Tailwind blue-500 */
            --border-color: #374151;
            /* Tailwind gray-700 */
            --dropdown-bg: #1f2937;
            /* Tailwind gray-800 */
            --dropdown-hover: #374151;
            /* Tailwind gray-700 */
        }
        .present {
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
        }

        .absent {
            background-color: #F44336;
            color: white;
        }
    </style>
</head>

<body class="bg-gray-900 text-white">

    <nav class="bg-[var(--bg-primary)] border-[var(--border-color)]">
        <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
            <a href="/" class="flex items-center space-x-3">
                <span
                    class="self-center text-2xl font-semibold whitespace-nowrap text-[var(--text-primary)]">iLearnCore</span>
            </a>

            <div class="flex items-center md:order-2 space-x-3">
                <!-- User Avatar Dropdown -->
                <button type="button"
                    class="flex text-sm bg-[var(--bg-secondary)] rounded-full focus:ring-4 focus:ring-[var(--border-color)]"
                    id="user-menu-button" aria-expanded="false" data-dropdown-toggle="user-dropdown"
                    data-dropdown-placement="bottom">
                    <span class="sr-only">Open user menu</span>
                    <img class="w-8 h-8 rounded-full" src="https://randomuser.me/api/portraits/men/45.jpg"
                        alt="user photo">
                </button>
                <!-- Dropdown menu -->
                <div class="z-50 hidden my-4 text-base list-none bg-[var(--dropdown-bg)] divide-y divide-[var(--border-color)] rounded-lg shadow-sm"
                    id="user-dropdown">
                    <div class="px-4 py-3">
                        <span class="block text-sm text-[var(--text-primary)]">{{user.fname}} {{user.sname}}</span>
                        <span class="block text-sm text-[var(--text-secondary)] truncate">{{user.uname}}</span>
                    </div>
                    <ul class="py-2">
                        <li><a href="/profile"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Profile</a>
                        </li>
                        <li><a href="changePassword"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Change
                                Password</a>
                        </li>
                        <li><a href="/logout"
                                class="block px-4 py-2 text-sm text-[var(--text-secondary)] hover:bg-[var(--dropdown-hover)]">Log
                                Out</a>
                        </li>
                    </ul>
                </div>


                <!-- Mobile Menu Button -->
                <button data-collapse-toggle="navbar-user" type="button"
                    class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-[var(--text-secondary)] rounded-lg md:hidden hover:bg-[var(--border-color)]"
                    aria-controls="navbar-user" aria-expanded="false">
                    <span class="sr-only">Open main menu</span>
                    <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 17 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M1 1h15M1 7h15M1 13h15" />
                    </svg>
                </button>
            </div>

            <!-- Navigation Links -->
            <div class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1" id="navbar-user">
                <ul
                    class="flex flex-col font-medium p-4 border border-[var(--border-color)] rounded-lg bg-[var(--bg-secondary)] md:space-x-8 md:flex-row md:border-0">
                    <li><a href="/"
                            class="block py-2 px-3 text-[var(--text-primary)] bg-[var(--text-hover)] rounded-sm">Home</a>
                    </li>
                    <li><a href="/attendance"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Attendance-calender</a>
                    </li>
                    <li><a href="/homework"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Homework</a>
                    </li>
                    <li><a href="/notice-board"
                            class="block py-2 px-3 text-[var(--text-primary)] rounded-sm hover:bg-[var(--border-color)]">Notice
                            Board</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>


    <div class="max-w-full mx-auto mt-6">
        <div id="card-container" class="relative overflow-hidden h-96">
            <input type="hidden" value="6" id="std-input" autocomplete="off">
            {{#each students}}
            <div class="student-card bg-gray-800 p-4 rounded-lg shadow-md text-center absolute inset-0 transition-transform duration-300 ease-in-out"
                data-id="2">
                <img src="https://randomuser.me/api/portraits/men/1{{@index}}.jpg"
                    class="w-24 h-24 mx-auto rounded-full mb-4">
                <h2 class="text-xl font-semibold">{{this.fname}} {{this.sname}}</h2>
                <p>Class: 6 | Roll No: {{@index}}</p>
                <input type="hidden" value="{{this.uid}}">
            </div>
            {{/each}}
        </div>

        <div class="flex space-x-4 mt-4">
            <button id="present-btn" class="bg-green-500 text-white px-4 py-2 rounded-lg w-1/2">Mark Present</button>
            <button id="absent-btn" class="bg-red-500 text-white px-4 py-2 rounded-lg w-1/2">Mark Absent</button>
        </div>

        <button id="undo-btn" class="mt-4 bg-yellow-500 text-white px-4 py-2 rounded-lg w-full">Undo</button>

        <button id="review-btn" class="mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg w-full">Review
            Attendance</button>

        <div id="review-section" class="hidden fixed top-0 left-0 w-full h-full bg-gray-900 p-6 overflow-auto">
            <h2 class="text-2xl font-bold text-center mb-4">Review Attendance</h2>
            <table class="w-full text-left border border-gray-700">
                <thead>
                    <tr class="bg-gray-800">
                        <th class="px-4 py-2">Roll No</th>
                        <th class="px-4 py-2">Name</th>
                        <th class="px-4 py-2">Status</th>
                    </tr>
                </thead>
                <tbody id="attendance-summary"></tbody>
            </table>
            <button id="submit-btn" class="mt-4 bg-green-500 text-white px-4 py-2 rounded-lg w-full">Confirm
                Attendance</button>
        </div>
    </div>

    <script>
        const cards = document.querySelectorAll('.student-card');
        const undoBtn = document.getElementById('undo-btn');
        const reviewSection = document.getElementById('review-section');
        const attendanceSummary = document.getElementById('attendance-summary');
        const submitBtn = document.getElementById('submit-btn');
        const presentBtn = document.getElementById('present-btn');
        const absentBtn = document.getElementById('absent-btn');
        const reviewBtn = document.getElementById('review-btn');

        let currentIndex = 0;
        const attendanceData = [];
        const attendanceSendData = [];
        const actionHistory = [];

        function showCard(index) {
            cards.forEach((card, i) => {
                const scale = i === index ? 1 : 0.9;
                const zIndex = i === index ? 2 : 1;
                card.style.transform = `translateX(${(i - index) * 100}%) scale(${scale})`;
                card.style.zIndex = zIndex;
            });
        }

        function markAttendance(status) {
            const currentCard = cards[currentIndex];
            const name = currentCard.querySelector('h2').textContent;
            const uid = currentCard.querySelector('input').value
            const rollNo = currentCard.querySelector('p').textContent.match(/Roll No: (\d+)/)[1];

            attendanceData.push({ status, name, rollNo });
            attendanceSendData.push({ uid, status });
            actionHistory.push(currentIndex);

            currentCard.classList.add(status === 'present' ? 'tumble-left' : 'tumble-right');
            setTimeout(() => {
                currentIndex++;
                if (currentIndex < cards.length) {
                    showCard(currentIndex);
                } else {
                    displayReview();
                }
            }, 500);
        }


        function undoAction() {
            if (actionHistory.length === 0 || currentIndex === 0) return;

            currentIndex = actionHistory.pop();
            attendanceData.pop();

            const currentCard = cards[currentIndex];
            currentCard.classList.remove('tumble-left', 'tumble-right');

            setTimeout(() => {
                currentCard.style.opacity = "1";
                currentCard.style.transform = "translateX(0) scale(1)";
                showCard(currentIndex);
            }, 10);
        }

        function displayReview() {
            reviewSection.classList.remove('hidden');
            attendanceSummary.innerHTML = '';

            attendanceData.forEach((entry) => {
                attendanceSummary.innerHTML += `
                    <tr>
                        <td class="px-4 py-2">${entry.rollNo}</td>
                        <td class="px-4 py-2">${entry.name}</td>
                        <td class="px-4 py-2 status-toggle" data-status="${entry.status}">${entry.status}</td>
                    </tr>`;
            });
        }

        function handleSwipe(e) {
            const touchStartX = e.changedTouches[0].screenX;

            e.target.addEventListener('touchend', (endEvent) => {
                const touchEndX = endEvent.changedTouches[0].screenX;
                const swipeDistance = touchEndX - touchStartX;

                if (swipeDistance < 50) markAttendance('present'); // Swipe right
                else if (swipeDistance > -50) markAttendance('absent'); // Swipe left
            }, { once: true });
        }

        cards.forEach(card => card.addEventListener('touchstart', handleSwipe));

        undoBtn.addEventListener('click', undoAction);
        presentBtn.addEventListener('click', () => markAttendance('present'));
        absentBtn.addEventListener('click', () => markAttendance('absent'));
        reviewBtn.addEventListener('click', displayReview);

        attendanceSummary.addEventListener('click', (e) => {
            if (e.target.classList.contains('status-toggle')) {
                const newStatus = e.target.textContent === 'present' ? 'absent' : 'present';
                e.target.textContent = newStatus;
                e.target.dataset.status = newStatus;

                const row = e.target.parentElement;
                const rollNo = row.children[0].textContent;  // Roll No column
                const name = row.children[1].textContent;    // Name column

                // Update attendanceData
                const attendanceEntry = attendanceData.find(entry => entry.rollNo === rollNo && entry.name === name);
                if (attendanceEntry) {
                    attendanceEntry.status = newStatus;
                }

                // Update attendanceSendData
                const studentUID = attendanceSendData.find(entry => attendanceEntry && entry.uid === attendanceSendData[attendanceData.indexOf(attendanceEntry)]?.uid);
                if (studentUID) {
                    studentUID.status = newStatus;
                }
            }
        });


        submitBtn.addEventListener('click', () => {
            $.ajax({
                url: '/attendance/mark',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    date: new Date().toISOString().split('T')[0],
                    std: document.getElementById('std-input').value,
                    attendance: attendanceSendData
                }),
                success: function (response) {
                    
                    window.location.href = `${window.location.protocol}//${window.location.host}/`
                },
                error: function (error) {
                    console.error('Error submitting attendance:', error);
                }
            });
        });



        showCard(currentIndex);
    </script>
</body>

</html>